generator client {
  provider = "prisma-client-js"
  // Force regeneration after removing avatar_url and workshop fields
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id                   String               @id @default(cuid())
  userId               String               @unique @map("user_id")
  email                String?              @unique
  name                 String
  phone                String?
  address              String?
  birthDate            DateTime?            @map("birth_date") @db.Date
  emergencyContact     String?              @map("emergency_contact")
  emergencyPhone       String?              @map("emergency_phone")
  role                 Role                 @default(USER)
  preferences          Json?
  isActive             Boolean              @default(true) @map("is_active")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  announcementsCreated Announcement[]       @relation("AnnouncementCreator")
  workshopEnrollments  WorkshopEnrollment[]
  workshopsCreated     Workshop[]           @relation("WorkshopCreator")

  @@map("user_profiles")
}

model Workshop {
  id                  String               @id @default(cuid())
  title               String
  description         String
  instructor          String
  category            WorkshopCategory     @default(GENERAL)
  maxParticipants     Int                  @default(20) @map("max_participants")
  currentParticipants Int                  @default(0) @map("current_participants")
  startDate           DateTime             @map("start_date")
  endDate             DateTime             @map("end_date")
  schedule            String?
  location            String
  imageUrl            String?              @map("image_url")
  isActive            Boolean              @default(true) @map("is_active")
  isFeatured          Boolean              @default(false) @map("is_featured")
  createdBy           String?              @map("created_by")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  enrollments         WorkshopEnrollment[]
  creator             UserProfile?         @relation("WorkshopCreator", fields: [createdBy], references: [userId])

  @@map("workshops")
}

model WorkshopEnrollment {
  id             String           @id @default(cuid())
  userId         String           @map("user_id")
  workshopId     String           @map("workshop_id")
  status         EnrollmentStatus @default(ENROLLED)
  enrollmentDate DateTime         @default(now()) @map("enrollment_date")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  user           UserProfile      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  workshop       Workshop         @relation(fields: [workshopId], references: [id], onDelete: Cascade)

  @@unique([userId, workshopId])
  @@map("workshop_enrollments")
}

model Announcement {
  id             String           @id @default(cuid())
  title          String
  content        String
  excerpt        String?
  type           AnnouncementType @default(GENERAL)
  priority       Int              @default(1) @db.SmallInt
  isActive       Boolean          @default(true) @map("is_active")
  isPinned       Boolean          @default(false) @map("is_pinned")
  startDate      DateTime         @default(now()) @map("start_date")
  endDate        DateTime?        @map("end_date")
  imageUrl       String?          @map("image_url")
  linkUrl        String?          @map("link_url")
  linkText       String?          @map("link_text")
  targetAudience TargetAudience   @default(ALL) @map("target_audience")
  createdBy      String?          @map("created_by")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  creator        UserProfile?     @relation("AnnouncementCreator", fields: [createdBy], references: [userId])

  @@map("announcements")
}

enum Role {
  USER  @map("user")
  ADMIN @map("admin")
}

enum WorkshopCategory {
  GENERAL    @map("general")
  TECHNOLOGY @map("tecnologia")
  ART        @map("arte")
  LITERATURE @map("literatura")
  EDUCATION  @map("educacion")
  CULTURE    @map("cultura")
}


enum EnrollmentStatus {
  ENROLLED  @map("enrolled")
  CANCELLED @map("cancelled")
  COMPLETED @map("completed")
  NO_SHOW   @map("no_show")
}

enum AnnouncementType {
  GENERAL     @map("general")
  EVENT       @map("event")
  IMPORTANT   @map("important")
  MAINTENANCE @map("maintenance")
  NEWS        @map("news")
  EMERGENCY   @map("emergency")
}

enum TargetAudience {
  ALL   @map("all")
  USERS @map("users")
  STAFF @map("staff")
}
